// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/books.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BooksServiceClient is the client API for BooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BooksServiceClient interface {
	AddBook(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	AddBooks(ctx context.Context, in *MultipleBooksRequest, opts ...grpc.CallOption) (*MultipleBooksResponse, error)
	UpdateBook(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	GetAllBooks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllBooksResponse, error)
	GetBookByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*IDResponse, error)
	GetBookByTitle(ctx context.Context, in *TitleRequest, opts ...grpc.CallOption) (*TitleResponse, error)
	GetBookByAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*AuthorResponse, error)
	Novel(ctx context.Context, in *NovelRequest, opts ...grpc.CallOption) (*NovelResponse, error)
	Arbitrary(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	DataArbitrary(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error)
}

type booksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBooksServiceClient(cc grpc.ClientConnInterface) BooksServiceClient {
	return &booksServiceClient{cc}
}

func (c *booksServiceClient) AddBook(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/AddBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) AddBooks(ctx context.Context, in *MultipleBooksRequest, opts ...grpc.CallOption) (*MultipleBooksResponse, error) {
	out := new(MultipleBooksResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/AddBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) UpdateBook(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) GetAllBooks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllBooksResponse, error) {
	out := new(GetAllBooksResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/GetAllBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) GetBookByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/GetBookByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) GetBookByTitle(ctx context.Context, in *TitleRequest, opts ...grpc.CallOption) (*TitleResponse, error) {
	out := new(TitleResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/GetBookByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) GetBookByAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/GetBookByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) Novel(ctx context.Context, in *NovelRequest, opts ...grpc.CallOption) (*NovelResponse, error) {
	out := new(NovelResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/Novel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) Arbitrary(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, "/proto.BooksService/Arbitrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) DataArbitrary(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/proto.BooksService/DataArbitrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksServiceServer is the server API for BooksService service.
// All implementations must embed UnimplementedBooksServiceServer
// for forward compatibility
type BooksServiceServer interface {
	AddBook(context.Context, *AddRequest) (*AddResponse, error)
	AddBooks(context.Context, *MultipleBooksRequest) (*MultipleBooksResponse, error)
	UpdateBook(context.Context, *AddRequest) (*UpdateResponse, error)
	GetAllBooks(context.Context, *emptypb.Empty) (*GetAllBooksResponse, error)
	GetBookByID(context.Context, *IDRequest) (*IDResponse, error)
	GetBookByTitle(context.Context, *TitleRequest) (*TitleResponse, error)
	GetBookByAuthor(context.Context, *AuthorRequest) (*AuthorResponse, error)
	Novel(context.Context, *NovelRequest) (*NovelResponse, error)
	Arbitrary(context.Context, *DataRequest) (*DataResponse, error)
	DataArbitrary(context.Context, *structpb.Struct) (*structpb.Struct, error)
	mustEmbedUnimplementedBooksServiceServer()
}

// UnimplementedBooksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBooksServiceServer struct {
}

func (UnimplementedBooksServiceServer) AddBook(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBooksServiceServer) AddBooks(context.Context, *MultipleBooksRequest) (*MultipleBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBooks not implemented")
}
func (UnimplementedBooksServiceServer) UpdateBook(context.Context, *AddRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBooksServiceServer) GetAllBooks(context.Context, *emptypb.Empty) (*GetAllBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBooks not implemented")
}
func (UnimplementedBooksServiceServer) GetBookByID(context.Context, *IDRequest) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByID not implemented")
}
func (UnimplementedBooksServiceServer) GetBookByTitle(context.Context, *TitleRequest) (*TitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByTitle not implemented")
}
func (UnimplementedBooksServiceServer) GetBookByAuthor(context.Context, *AuthorRequest) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByAuthor not implemented")
}
func (UnimplementedBooksServiceServer) Novel(context.Context, *NovelRequest) (*NovelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Novel not implemented")
}
func (UnimplementedBooksServiceServer) Arbitrary(context.Context, *DataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Arbitrary not implemented")
}
func (UnimplementedBooksServiceServer) DataArbitrary(context.Context, *structpb.Struct) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataArbitrary not implemented")
}
func (UnimplementedBooksServiceServer) mustEmbedUnimplementedBooksServiceServer() {}

// UnsafeBooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksServiceServer will
// result in compilation errors.
type UnsafeBooksServiceServer interface {
	mustEmbedUnimplementedBooksServiceServer()
}

func RegisterBooksServiceServer(s grpc.ServiceRegistrar, srv BooksServiceServer) {
	s.RegisterService(&BooksService_ServiceDesc, srv)
}

func _BooksService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/AddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).AddBook(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_AddBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).AddBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/AddBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).AddBooks(ctx, req.(*MultipleBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).UpdateBook(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_GetAllBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).GetAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/GetAllBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).GetAllBooks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_GetBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).GetBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/GetBookByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).GetBookByID(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_GetBookByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).GetBookByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/GetBookByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).GetBookByTitle(ctx, req.(*TitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_GetBookByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).GetBookByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/GetBookByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).GetBookByAuthor(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_Novel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).Novel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/Novel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).Novel(ctx, req.(*NovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_Arbitrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).Arbitrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/Arbitrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).Arbitrary(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_DataArbitrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).DataArbitrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BooksService/DataArbitrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).DataArbitrary(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

// BooksService_ServiceDesc is the grpc.ServiceDesc for BooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BooksService",
	HandlerType: (*BooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _BooksService_AddBook_Handler,
		},
		{
			MethodName: "AddBooks",
			Handler:    _BooksService_AddBooks_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BooksService_UpdateBook_Handler,
		},
		{
			MethodName: "GetAllBooks",
			Handler:    _BooksService_GetAllBooks_Handler,
		},
		{
			MethodName: "GetBookByID",
			Handler:    _BooksService_GetBookByID_Handler,
		},
		{
			MethodName: "GetBookByTitle",
			Handler:    _BooksService_GetBookByTitle_Handler,
		},
		{
			MethodName: "GetBookByAuthor",
			Handler:    _BooksService_GetBookByAuthor_Handler,
		},
		{
			MethodName: "Novel",
			Handler:    _BooksService_Novel_Handler,
		},
		{
			MethodName: "Arbitrary",
			Handler:    _BooksService_Arbitrary_Handler,
		},
		{
			MethodName: "DataArbitrary",
			Handler:    _BooksService_DataArbitrary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/books.proto",
}
